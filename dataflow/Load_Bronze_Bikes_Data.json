{
	"name": "Load_Bronze_Bikes_Data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Bikes_Ingestion_Dataset",
						"type": "DatasetReference"
					},
					"name": "BikesIngestedData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Bikes_BronzeLayer_Dataset",
						"type": "DatasetReference"
					},
					"name": "LoadBikesDataToSynapse"
				}
			],
			"transformations": [
				{
					"name": "SelectRequiredColumns"
				},
				{
					"name": "UpsertLogicForBikes"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BikeID as integer,",
				"          CustomerID as integer,",
				"          Make as string,",
				"          Model as string,",
				"          Year as integer,",
				"          RegistrationNo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> BikesIngestedData",
				"BikesIngestedData select(mapColumn(",
				"          BikeID,",
				"          CustomerID,",
				"          Make,",
				"          Model,",
				"          Year,",
				"          RegistrationNo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
				"SelectRequiredColumns alterRow(upsertIf(true())) ~> UpsertLogicForBikes",
				"UpsertLogicForBikes derive(raw_ingest_ts = currentTimestamp()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          BikeID as integer,",
				"          CustomerID as integer,",
				"          Make as string,",
				"          Model as string,",
				"          Year as integer,",
				"          RegistrationNo as string,",
				"          raw_ingest_ts as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['BikeID'],",
				"     skipKeyWrites:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BikeID,",
				"          CustomerID,",
				"          Make,",
				"          Model,",
				"          Year,",
				"          RegistrationNo,",
				"          raw_ingest_ts",
				"     )) ~> LoadBikesDataToSynapse"
			]
		}
	}
}