{
	"name": "Load_Bronze_Bikes_Data_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Bikes_Ingestion_Dataset",
						"type": "DatasetReference"
					},
					"name": "BikesIngestedData"
				},
				{
					"dataset": {
						"referenceName": "Bikes_BronzeLayer_Dataset",
						"type": "DatasetReference"
					},
					"name": "BikesSynapseWarehouse"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Bikes_BronzeLayer_Dataset",
						"type": "DatasetReference"
					},
					"name": "LoadBikesDataToSynapse"
				}
			],
			"transformations": [
				{
					"name": "AddOnlyNewBikes"
				},
				{
					"name": "DeriveCurrentTimestampColumn"
				},
				{
					"name": "JoinNewBikesAndWarehouseData"
				},
				{
					"name": "SelectBikesRequiredColumn"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BikeID as integer,",
				"          CustomerID as integer,",
				"          Make as string,",
				"          Model as string,",
				"          Year as integer,",
				"          RegistrationNo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> BikesIngestedData",
				"source(output(",
				"          BikeID as integer,",
				"          CustomerID as integer,",
				"          Make as string,",
				"          Model as string,",
				"          Year as integer,",
				"          RegistrationNo as string,",
				"          raw_ingest_ts as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> BikesSynapseWarehouse",
				"select1 alterRow(insertIf(isNull(BikeID_Wh))) ~> AddOnlyNewBikes",
				"SelectBikesRequiredColumn derive(raw_ingest_ts = currentTimestamp()) ~> DeriveCurrentTimestampColumn",
				"BikesIngestedData, BikesSynapseWarehouse join(BikesIngestedData@BikeID == BikesSynapseWarehouse@BikeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinNewBikesAndWarehouseData",
				"derivedColumn1 select(mapColumn(",
				"          BikeID = BikesIngestedData@BikeID,",
				"          CustomerID = BikesIngestedData@CustomerID,",
				"          Make = BikesIngestedData@Make,",
				"          Model = BikesIngestedData@Model,",
				"          Year = BikesIngestedData@Year,",
				"          RegistrationNo = BikesIngestedData@RegistrationNo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectBikesRequiredColumn",
				"AddOnlyNewBikes derive(test = isNull(BikesSynapseWarehouse@BikeID)) ~> derivedColumn1",
				"JoinNewBikesAndWarehouseData select(mapColumn(",
				"          BikeID = BikesIngestedData@BikeID,",
				"          CustomerID = BikesIngestedData@CustomerID,",
				"          Make = BikesIngestedData@Make,",
				"          Model = BikesIngestedData@Model,",
				"          Year = BikesIngestedData@Year,",
				"          RegistrationNo = BikesIngestedData@RegistrationNo,",
				"          BikeID_Wh = BikesSynapseWarehouse@BikeID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"DeriveCurrentTimestampColumn sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          BikeID as integer,",
				"          CustomerID as integer,",
				"          Make as string,",
				"          Model as string,",
				"          Year as integer,",
				"          RegistrationNo as string,",
				"          raw_ingest_ts as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BikeID,",
				"          CustomerID,",
				"          Make,",
				"          Model,",
				"          Year,",
				"          RegistrationNo,",
				"          raw_ingest_ts",
				"     )) ~> LoadBikesDataToSynapse"
			]
		}
	}
}